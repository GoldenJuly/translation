本文主要翻译Thrift，原文链接如下：https://thrift.apache.org/static/files/thrift-20070401.pdf


Thrift：可扩展的跨语言的服务（的实现）

摘要：
Thrift是facebook开发的一个软件库和一组代码生成工具，用于加速开发和实现高效、可扩展的后台服务。
最初的目的是通过抽象不同编程语言中的公共库文件，提高不同编程语言之间的通信的效率和可靠性。
开发人员使用使用Thrift创建一个中立语言（语言无关）的文件定义数据结构和服务接口，并可通过该文件生成所需要的代码来构建RPC的客户端和服务端代码。

该文详述了设计Thrift时的动机和选择，以及一些有趣的实现细节，本文并不是以研究为目的，只是一个我们做了什么以及为什么这么做的阐述。

1、简介：
随着Facebook流量的增长和网络结构的扩大，网站的不同操作（搜索，选择，传输，日志）对资源的需求所需要的技术需求已经大大超过了LAMP（Linux+Apache+Mysql/MariaDB+Perl/PHP/Python）框架的技术范围。
在我们实现的这些服务中，选择了多种编程语言来实现性能总和的最优，简化和加速开发，公共库的利用率等。
大体上而言，Facebook的工程文化倾向于选择最好的工具以及每种语言标准之上的最新的实现，并不接受其局限性。

鉴于这些设计选择，我们面临了构建一个透明，高性能，跨语言的沟通机制的挑战，我们发现现存的大部分解决方法要么太局限，并没有提供充分的数据结构，要么性能不足。

我们实现的方案将一个由跨编程语言实现的语言中立软件栈和该语言的代码生成引擎结合，该引擎将简单的接口和数据定义语言转换成客户端和服务器的RPC库。

在动态的系统上选择静态的创建方法使我们可以创建有效的代码，而不在需要再在运行时的类型检查。
对于开发者，其设计页尽可能的简单，开发者可以通过一个简短的文件对一个复杂的服务定义所有的数据和接口。

令人惊讶的是，这些相对常见的普通问题并没有一个强大的开源解决方案，我们决定将Thrift早点开源。

在评估网络环境的跨语言交互挑战中，定义了一些关键的组件：
类型：
一个通用类型系统必须存在跨编程语言，而不需要开发者使用特定的Thrift数据类型或者开发自己的序列化代码。
也就是说，C++开发者应该可以透明地将STL map数据类型换成动态Python字典。开发者没有必要（不应该被迫）编写程序底层的代码来实现这些。
第二节将详述Thrift的类型系统。

传输：
每一个语言必须有一个通用的接口来实现数据双向传输。该传输特性应该开发人员无关的。
相同的应用程序代码应该可以基于TCP的套接字传输，或者基于内存数据或者基于磁盘文件数据。
第三节将详述Thrift传输层。

协议：
数据类型必须有一些方法来使用传输层对其进行编码和解码。同样的，开发者无需关心该层。
服务使用XML或者二进制协议对代码来说是不关心的。重要的是数据可以在连续的确定的介质上读写。
第四节将详述Thrift协议层。

版本：
一个健壮的系统，对涉及到的数据类型必须提供一种版本控制的机制。
特别地，应该在不中断服务的情况下能够新增或者删除对象字段或者修改接口参数（或者最糟糕的段错误）
第五节将详述Thrift版本控制系统。

处理逻辑：
最后，我们生成了可以处理数据流的代码来完成RPC功能。
第六节将详述生成的代码以及TProcessor范例。

第七节讨论了一些实现细节，第八节简述了我们的结论。

2、类型
Thrift类型系统的目的是让开发者完全使用本地定义的类型，而不关心编程语言的类型。
通过设计，Thrift类型系统并不引入任何特性动态类型或者嵌套对象。
也不需要开发者开发对象的序列化和传输的的功能。Thrift IDL（接口定义语言）文件是一个逻辑上的方法，
该方法用来注释其数据结构并有附加最少的必要信息来告诉代码生成器如何更安全的在跨语言中传输对象数据。

2.1、基本类型
该类型系统依赖一些基本的数据类型。在考虑支持哪些类型的过程中，我们主要考虑清晰简明而不是冗余，
关注所有编程语言中那些关键的数据类型，忽略那些个别语言中的特定类型。
Thrift支持的基本类型如下：
• bool 布尔类型，true or false
• byte 一个有符号字节
• i16 16bit有符号字节
• i32 32bit有符号字节
• i64 64bit有符号字节
• double 64字节浮点数
• string string类型
值得注意的是缺少无符号整数类型。因为在许多语言中，这些类型并没有直接的转换成本地原始类型的方法，所以这些语言提供的这些类型的的优势会消失。
进一步，并没有方法来阻止开发者在语言中（如Python）将一个负值赋值给一个整型变量，从而导致不可预测的行为。
从设计的角度，我们注意到无符号整数很少（如果有）用于算术目的，更多的是用作标识符或键。
在这种情况下，符号是无关紧要的，当需要时，有符号整数可以达到同样的目的并且可以安全的转换成其对应的无符号数（大多数在C++中）。

2.2、结构化数据
Thrift结构定定义了跨语言的通用对象，一个结构本质上等同于面向对象编程中的类，每个字段都有特定的名字标识符，定义Thrift结构的基本语法就像C语言的结构体。
字段必须用一个整数标识符和可选的默认值标识（该标识符在结构体内唯一）。如果省略，会自动分配，但强烈鼓励出于后面讨论的版本化原因。

2.3、容器
Thrift容器是强类型容器，映射了通用编程语言中大部分使用的容器，它们使用C++（或者Java Generics）的风格引用，共有3种类型：
• list<type> 有序列表元素，可以直接转换成STL vector, Java ArrayList，或者脚本语言的数组，数字可重复。
• set<type> 无序集合，可以转换成STL set, Java HashSet, Python set 或者PHP/Ruby的本地字典。
• map<type1,type2> key到value的映射，可以转换成STL map, Java HashMap, PHP关联数组，或者Python/Ruby的字典。

虽然提供了默认值，类型的映射并没有明确地固定。目标语言添加了自定义的代码生成器指令来替换自定义类型（如hash map或者Google稀疏hash map可以在C++中使用）。
唯一的要求是自定义类型支持所有的迭代原语。容器元素可以是任意的有效Thrift类型，也可以是其他容器或者结构化数据。

struct Example {
  1:i32 number=10,
  2:i64 bigNumber,
  3:double decimals,
  4:string name="thrifty"
}
在目标语言中，每一个定义会让一个类型生产两个中法，读和写，它们使用Thrift TProtocol对象来序列化和传输对象数据

2.4、异常
异常在语法和功能上等同于结构体，除了在声明的时候采用exception关键字而不是struct关键字。
在每种目标编程语言中，生成的对象继承了异常的基类，为了无缝集成不同语言的异常处理句柄。同样的，该设计强调开发者熟悉的代码（语法）。

2.5、服务
服务是是用Thrift类型来定义。服务的定义等同于面向对象编程中的接口（或者纯虚函数）的定义。Thrift编译器生成功能完整的客户端和服务端的Stub函数，用来实现这些接口，
服务的定义如下：
service <name> {
  <returntype> <name>(<arguments>)
  [throws (<exceptions>)]
  ...
}
An example:
service StringCache {
  void set(1:i32 key, 2:string value),
  string get(1:i32 key) throws (1:KeyNotFound knf),
  void delete(1:i32 key)
}
注意void对于函数返回值有效，其他定义的Thrift类型也有效。另外，一个异步修饰符可以添加到void函数，这会生不用等服务端响应的代码。
注意到一个纯粹的void函数会返回一个响应给客户端来保证该函数的操作在服务端完成。异步方法调用只能保证客户端的请求成功到达传输层
（在许多传输场景中，由于Byzantine Generals’ Problem，这种方式是天生不可靠的，因此，开发者应该注意只能在dropped方法调用可以接受或者传输被认为是可靠
的情况下才使用该方法）。
同样注意的是函数参数列表和异常列表使用的是Thrift结构，这三个结构的参数符号和行为都是明确的。

3、传输
（生成器生成的）代码使用传输层来加快数据传输。

3.1、接口
Thrift实现中一个关键的设计就是解耦传输层和代码层。
虽然Thrift通常在TCP/IP协议栈上使用流套接字作为通信的基础层，但是没有很强的理由将该约束引入Thrift系统中。
抽象I/O层（每个操作大约一个虚方法调用）引起的性能这种（损失）相比于实际的I/O操作（通常唤醒系统调用）可以忽略。

从根本上说，生成的Thrift代码只需要知道如何读和写数据。数据的源头和目的是无关紧要的；它可以是套接字，一段共享内存，或者本地文件，
Thrift传输层接口支持以下方法：
• open   打开传输
• close  关闭传输
• isOpen 验证传输是否打开
• read   从传输中读取数据
• write  往传输中写数据
• flush  Forces any pending writes

还有一些其他方法并没有在这里说明，这些方法用于帮助批读取并可选地的用信号通知生成代码读写操作的完成。
另外上面的TTransport接口，还有一个TServerTransport接口用于接收和创建原始transport对象，它的接口如下：
• open   打开传输
• listen 开始监听连接
• accept 返回一个新的客户传输对象
• close  关闭传输

3.2、实现
传输接口设计是为了简化编程语言中的实现，新的传输机制可以让开发者很容易的定义
3.2.1、TSocket
TSocket类的实现时跨所有目标语言的，它提供了一个通用，简单的TCP/IP流套接字。
3.2.2、TFileTransport
TFileTransport是磁盘文件到数据流的抽象类，可以用来将一组接收的Thrift请求写入磁盘文件，
然后磁盘数据可以在日志中重放，用于后处理或用于再现和/或模拟过去的事。
3.2.3、实用性
传输接口旨在使用常见的OOP技术（如组合）来容易地支持扩展。一些简单的实用程序包括TBufferedTransport，它可以缓冲
底层传输的读写，TFramedTransport使用帧大小标题传输数据以进行分块优化或非阻塞操作，以及TMemoryBuffer允许直接读写
该进程拥有的内存堆或栈。

4、协议
Thrift的第二个主要抽象数据结构和传输对象分离。Thrift强制使用一个明确的消息结构传输数据，但是对于协议的在用的编码是不可知的。
也就是说，不管数据被编码成XML，ASCII码，或者二进制形式，只要这些数据支持一组固定的操作使其可以被代码明确的读写即可。

4.1 接口
Thrift协议接口非常简单，它从根本上支持两件事：1）双向消息排序，2）基类型，容器和结构的编码。
writeMessageBegin(name, type, seq)
writeMessageEnd()
writeStructBegin(name)
writeStructEnd()
writeFieldBegin(name, type, id)
writeFieldEnd()
writeFieldStop()
writeMapBegin(ktype, vtype, size)
writeMapEnd()
writeListBegin(etype, size)
writeListEnd()
writeSetBegin(etype, size)
writeSetEnd()
writeBool(bool)
writeByte(byte)
writeI16(i16)
writeI32(i32)
writeI64(i64)
writeDouble(double)
writeString(string)

name, type, seq = readMessageBegin()
                  readMessageEnd()
name =            readStructBegin()
                  readStructEnd()
name, type, id =  readFieldBegin()
                  readFieldEnd()
k, v, size =      readMapBegin()
                  readMapEnd()
etype, size =     readListBegin()
                  readListEnd()
etype, size =     readSetBegin()
                  readSetEnd()
bool =            readBool()
byte =            readByte()
i16 =             readI16()
i32 =             readI32()
i64 =             readI64()
double =          readDouble()
string =          readString()

注意到每个写函数都有对应的读函数，除了writeFieldStop函数。这是一个表示结构体结束的特殊方法。
读结构体的过程是readFieldBegin（）直到遇到停止字段，然后readStructEnd（）。
生成的代码依赖于这个调用序列确保一切由协议编码器写的数据可以由匹配的协议解码器读取。
进一步说明这套功能在设计上比必要的更强大。例如，writeStructEnd（）不是严格必要的，因为停止字段可以表明结构的结尾。
对于冗长的协议，这是一个很方便的方法，可以更清晰地分离这些调用（例如XML中的结束</struct>标记）。

4.2、结构













