本文主要翻译Thrift，原文链接如下：https://thrift.apache.org/static/files/thrift-20070401.pdf


Thrift：可扩展的跨语言的服务（的实现）

摘要：
Thrift是facebook开发的一个软件库和一组代码生成工具，用于加速开发和实现高效、可扩展的后台服务。
最初的目的是通过抽象不同编程语言中的公共库文件，提高不同编程语言之间的通信的效率和可靠性。
开发人员使用使用Thrift创建一个中立语言（语言无关）的文件定义数据结构和服务接口，并可通过该文件生成所需要的代码来构建RPC的客户端和服务端代码。

该文详述了设计Thrift时的动机和选择，以及一些有趣的实现细节，本文并不是以研究为目的，只是一个我们做了什么以及为什么这么做的阐述。

1、简介：
随着Facebook流量的增长和网络结构的扩大，网站的不同操作（搜索，选择，传输，日志）对资源的需求所需要的技术需求已经大大超过了LAMP（Linux+Apache+Mysql/MariaDB+Perl/PHP/Python）框架的技术范围。
在我们实现的这些服务中，选择了多种编程语言来实现性能总和的最优，简化和加速开发，公共库的利用率等。
大体上而言，Facebook的工程文化倾向于选择最好的工具以及每种语言标准之上的最新的实现，并不接受其局限性。

鉴于这些设计选择，我们面临了构建一个透明，高性能，跨语言的沟通机制的挑战，我们发现现存的大部分解决方法要么太局限，并没有提供充分的数据结构，要么性能不足。

我们实现的方案将一个由跨编程语言实现的语言中立软件栈和该语言的代码生成引擎结合，该引擎将简单的接口和数据定义语言转换成客户端和服务器的RPC库。

在动态的系统上选择静态的创建方法使我们可以创建有效的代码，而不在需要再在运行时的类型检查。
对于开发者，其设计页尽可能的简单，开发者可以通过一个简短的文件对一个复杂的服务定义所有的数据和接口。

令人惊讶的是，这些相对常见的普通问题并没有一个强大的开源解决方案，我们决定将Thrift早点开源。

在评估网络环境的跨语言交互挑战中，定义了一些关键的组件：
类型：
一个通用类型系统必须存在跨编程语言，而不需要开发者使用特定的Thrift数据类型或者开发自己的序列化代码。
也就是说，C++开发者应该可以透明地将STL map数据类型换成动态Python字典。开发者没有必要（不应该被迫）编写程序底层的代码来实现这些。
第二节将详述Thrift的类型系统。

传输：
每一个语言必须有一个通用的接口来实现数据双向传输。该传输特性应该开发人员无关的。
相同的应用程序代码应该可以基于TCP的套接字传输，或者基于内存数据或者基于磁盘文件数据。
第三节将详述Thrift传输层。

协议：
数据类型必须有一些方法来使用传输层对其进行编码和解码。同样的，开发者无需关心该层。
服务使用XML或者二进制协议对代码来说是不关心的。重要的是数据可以在连续的确定的介质上读写。
第四节将详述Thrift协议层。

版本：
一个健壮的系统，对涉及到的数据类型必须提供一种版本控制的机制。
特别地，应该在不中断服务的情况下能够新增或者删除对象字段或者修改接口参数（或者最糟糕的段错误）
第五节将详述Thrift版本控制系统。

处理逻辑：
最后，我们生成了可以处理数据流的代码来完成RPC功能。
第六节将详述生成的代码以及TProcessor范例。

第七节讨论了一些实现细节，第八节简述了我们的结论。

2、类型
Thrift类型系统的目的是让开发者完全使用本地定义的类型，而不关心编程语言的类型。
通过设计，Thrift类型系统并不引入任何特性动态类型或者嵌套对象。
也不需要开发者开发对象的序列化和传输的的功能。Thrift IDL（接口定义语言）文件是一个逻辑上的方法，
该方法用来注释其数据结构并有附加最少的必要信息来告诉代码生成器如何更安全的在跨语言中传输对象数据。

2.1、基本类型
该类型系统依赖一些基本的数据类型。在考虑支持哪些类型的过程中，我们主要考虑清晰简明而不是冗余，
关注所有编程语言中那些关键的数据类型，忽略那些个别语言中的特定类型。
Thrift支持的基本类型如下：
• bool 布尔类型，true or false
• byte 一个有符号字节
• i16 16bit有符号字节
• i32 32bit有符号字节
• i64 64bit有符号字节
• double 64字节浮点数
• string string类型
值得注意的是缺少无符号整数类型。因为在许多语言中，这些类型并没有直接的转换成本地原始类型的方法，所以这些语言提供的这些类型的的优势会消失。
进一步，并没有方法来阻止开发者在语言中（如Python）将一个负值赋值给一个整型变量，从而导致不可预测的行为。
从设计的角度，我们注意到无符号整数很少（如果有）用于算术目的，更多的是用作标识符或键。
在这种情况下，符号是无关紧要的，当需要时，有符号整数可以达到同样的目的并且可以安全的转换成其对应的无符号数（大多数在C++中）。

2.2、结构化数据
Thrift结构定定义了跨语言的通用对象，一个结构本质上等同于面向对象编程中的类，每个字段都有特定的名字标识符，定义Thrift结构的基本语法就像C语言的结构体。
字段必须用一个整数标识符和可选的默认值标识（该标识符在结构体内唯一）。如果省略，会自动分配，但强烈鼓励出于后面讨论的版本化原因。

2.3、容器
Thrift容器是强类型容器，映射了通用编程语言中大部分使用的容器，它们使用C++（或者Java Generics）的风格引用，共有3种类型：
• list<type> 有序列表元素，可以直接转换成STL vector, Java ArrayList，或者脚本语言的数组，数字可重复。
• set<type> 无序集合，可以转换成STL set, Java HashSet, Python set 或者PHP/Ruby的本地字典。
• map<type1,type2> key到value的映射，可以转换成STL map, Java HashMap, PHP关联数组，或者Python/Ruby的字典。

虽然提供了默认值，类型的映射并没有明确地固定。目标语言添加了自定义的代码生成器指令来替换自定义类型（如hash map或者Google稀疏hash map可以在C++中使用）。
唯一的要求是自定义类型支持所有的迭代原语。容器元素可以是任意的有效Thrift类型，也可以是其他容器或者结构化数据。

struct Example {
  1:i32 number=10,
  2:i64 bigNumber,
  3:double decimals,
  4:string name="thrifty"
}
在目标语言中，每一个定义会让一个类型生产两个中法，读和写，它们使用Thrift TProtocol对象来序列化和传输对象数据

2.4、异常
异常在语法和功能上等同于结构体，除了在声明的时候采用exception关键字而不是struct关键字。
在每种目标编程语言中，生成的对象继承了异常的基类，为了无缝集成不同语言的异常处理句柄。同样的，该设计强调开发者熟悉的代码（语法）。

2.5、服务
服务是是用Thrift类型来定义。服务的定义等同于面向对象编程中的接口（或者纯虚函数）的定义。Thrift编译器生成功能完整的客户端和服务端的Stub函数，用来实现这些接口，
服务的定义如下：
service <name> {
  <returntype> <name>(<arguments>)
  [throws (<exceptions>)]
  ...
}
An example:
service StringCache {
  void set(1:i32 key, 2:string value),
  string get(1:i32 key) throws (1:KeyNotFound knf),
  void delete(1:i32 key)
}
注意void对于函数返回值有效，其他定义的Thrift类型也有效。另外，一个异步修饰符可以添加到void函数，这会生不用等服务端响应的代码。
注意到一个纯粹的void函数会返回一个响应给客户端来保证该函数的操作在服务端完成。异步方法调用只能保证客户端的请求成功到达传输层
（在许多传输场景中，由于Byzantine Generals’ Problem，这种方式是天生不可靠的，因此，开发者应该注意只能在dropped方法调用可以接受或者传输被认为是可靠
的情况下才使用该方法）。
同样注意的是函数参数列表和异常列表使用的是Thrift结构，这三个结构的参数符号和行为都是明确的。

3、传输
（生成器生成的）代码使用传输层来加快数据传输。

3.1、接口
Thrift实现中一个关键的设计就是解耦传输层和代码层。
虽然Thrift通常在TCP/IP协议栈上使用流套接字作为通信的基础层，但是没有很强的理由将该约束引入Thrift系统中。
抽象I/O层（每个操作大约一个虚方法调用）引起的性能这种（损失）相比于实际的I/O操作（通常唤醒系统调用）可以忽略。

从根本上说，生成的Thrift代码只需要知道如何读和写数据。数据的源头和目的是无关紧要的；它可以是套接字，一段共享内存，或者本地文件，
Thrift传输层接口支持以下方法：
• open   打开传输
• close  关闭传输
• isOpen 验证传输是否打开
• read   从传输中读取数据
• write  往传输中写数据
• flush  Forces any pending writes

还有一些其他方法并没有在这里说明，这些方法用于帮助批读取并可选地的用信号通知生成代码读写操作的完成。
另外上面的TTransport接口，还有一个TServerTransport接口用于接收和创建原始transport对象，它的接口如下：
• open   打开传输
• listen 开始监听连接
• accept 返回一个新的客户传输对象
• close  关闭传输

3.2、实现
传输接口设计是为了简化编程语言中的实现，新的传输机制可以让开发者很容易的定义
3.2.1、TSocket
TSocket类的实现时跨所有目标语言的，它提供了一个通用，简单的TCP/IP流套接字。
3.2.2、TFileTransport
TFileTransport是磁盘文件到数据流的抽象类，可以用来将一组接收的Thrift请求写入磁盘文件，
然后磁盘数据可以在日志中重放，用于后处理或用于再现和/或模拟过去的事。
3.2.3、实用性
传输接口旨在使用常见的OOP技术（如组合）来容易地支持扩展。一些简单的实用程序包括TBufferedTransport，它可以缓冲
底层传输的读写，TFramedTransport使用帧大小标题传输数据以进行分块优化或非阻塞操作，以及TMemoryBuffer允许直接读写
该进程拥有的内存堆或栈。

4、协议
Thrift的第二个主要抽象数据结构和传输对象分离。Thrift强制使用一个明确的消息结构传输数据，但是对于协议的在用的编码是不可知的。
也就是说，不管数据被编码成XML，ASCII码，或者二进制形式，只要这些数据支持一组固定的操作使其可以被代码明确的读写即可。

4.1 接口
Thrift协议接口非常简单，它从根本上支持两件事：1）双向消息排序，2）基类型，容器和结构的编码。
writeMessageBegin(name, type, seq)
writeMessageEnd()
writeStructBegin(name)
writeStructEnd()
writeFieldBegin(name, type, id)
writeFieldEnd()
writeFieldStop()
writeMapBegin(ktype, vtype, size)
writeMapEnd()
writeListBegin(etype, size)
writeListEnd()
writeSetBegin(etype, size)
writeSetEnd()
writeBool(bool)
writeByte(byte)
writeI16(i16)
writeI32(i32)
writeI64(i64)
writeDouble(double)
writeString(string)

name, type, seq = readMessageBegin()
                  readMessageEnd()
name =            readStructBegin()
                  readStructEnd()
name, type, id =  readFieldBegin()
                  readFieldEnd()
k, v, size =      readMapBegin()
                  readMapEnd()
etype, size =     readListBegin()
                  readListEnd()
etype, size =     readSetBegin()
                  readSetEnd()
bool =            readBool()
byte =            readByte()
i16 =             readI16()
i32 =             readI32()
i64 =             readI64()
double =          readDouble()
string =          readString()

注意到每个写函数都有对应的读函数，除了writeFieldStop函数。这是一个表示结构体结束的特殊方法。
读结构体的过程是readFieldBegin（）直到遇到停止字段，然后readStructEnd（）。
生成的代码依赖于这个调用序列确保一切由协议编码器写的数据可以由匹配的协议解码器读取。
进一步说明这套功能在设计上比必要的更强大。例如，writeStructEnd（）不是严格必要的，因为停止字段可以表明结构的结尾。
对于冗长的协议，这是一个很方便的方法，可以更清晰地分离这些调用（例如XML中的结束</struct>标记）。

4.2、结构体
Thrift结构体的设计支持将其编码成流式传输协议。在编码之前，代码实现不需要构造或者计算整个结构体的数据长度。
在很多场景下，该设计对性能至关重要。考虑一长串相对较大的string列表。如果协议接口需要按照原子操作读写列表，
那么在编码之前，代码实现需要线性遍历整个列表（来获取其长度）。然而，如果列表可以遍历写，则相应的读操作则可并发，
理论上提供了端到端的加速（kN - C），其中N是列表的大小，k是序列化单个元素相关的成本因子，C是数据从可写到可读之间的延迟的固定偏移量。

类似地，结构体不会先验地编码他们的数据长度。取而代之的是，它们被编译成一系列字段，每个字段都有一个类型说明符和一个唯一字段标识符。
注意类型说明符的内含允许协议安全地解析和解码，而不需要任何生成的代码或者访问原始的IDC文件。

结构体是由一个字段结束，该字段前面有一个特殊的STOP类型。因为所有的基本类型都可以被确切地读取，所有的结构体（甚至好了了其他结构体的嵌套结构体）
也可以被确切地读取。Thrift是一个不需要任何框架和编码格式就可以自我划分边界的协议。在不需要流传输协议或者框架有利的情况下，使用TFramedTransport
抽象就可以非常简单的添加到传输层。

4.3、实现
Facebook开发实现了一个空间高效的二进制协议，该协议应用于大部分的后台服务。本质上，该协议将所有的数据写成一个扁平的二进制格式。整型被转换成网络字节序，
字符串前面会添加其长度，所有的信息以及字段头部使用整数原语序列化构造函数来写。使用生产代码时，忽略字段的字符串名称，因为字段标识符已经足够。
为了代码的简单清晰，我们决定不进行一些极端的存储优化（例如，打包小的整数成ASCII码或者使用7-bit连续存储格式），当我们遇到性能关键的用例需求时，这些很容易地做到上述改变（优化）。

5、版本控制
在版本和数据定义修改方面，Thrift非常强大。这对于部署的服务进行阶段性修改至关重要。系统必须能够支持读取日志文件的旧数据，
以及来自过时的客户端的请求新服务，反之亦然。

5.1、字段标识符
Thrift的版本控制是通过字段标识符实现的。Thrift结构体的字段头部的每一个数字被编码成一个唯一的字段标识符。
该字段标识符和类型说明符结合用来唯一的标识该字段。Thrift定义语言支持自动分配字段标识符，但是，总是明确地定义字段标识符是一个很好的编程习惯。
标识符的使用说明如下：
struct Example {
  1:i32 number=10,
  2:i64 bigNumber,
  3:double decimals,
  4:string name="thrifty"
}

为了避免手动分配和自动分配的标识符的冲突，遗漏了标识符的字段会从-1递减的分配标识符，Thrift只支持手动分配正数标识符。
当数据被反序列化，代码就可以使用这些标识符来合理地标识字段并确定该标识符是否与定义文件中的字段对齐。
如果一个字段的标识符没有被识别，代码可以使用类型说明符跳过未识别的字段而不会报错。同样地，这是可能的，因为所有的数据类型都是自定界限的。
字段标识符可以（应该）在函数参数列表中指定。事实上，参数列表不仅仅代表后端的结构，实际上在编译器前端共享相同的代码。
这使得方法参数可以进行版本安全地修改。
service StringCache {
  void set(1:i32 key, 2:string value),
  string get(1:i32 key) throws (1:KeyNotFound knf),
  void delete(1:i32 key)
}

指定字段标识符的语法使用来回显他们的结构，结构体可以被认识是一个字段，其标识符是key，values是强类型命名的字段。
字段标识符使用i16的Thrift内部类型。但是注意，TProtocol抽象可以将标识符编码成任意格式。

5.2、Isset（设置接口）
遇到意外字段时，可以安全地忽略并丢弃该字段。当找不到预期的字段时，必须有某种方式向开发人员发出信号，表明它不存在。
这是通过定义对象内部的内部isset结构实现的。（在PHP中，Isset功能隐含为空值，在Python中为None，在Ruby中为nil。）
实质上，每个Thrift结构的内部isset对象包含每个字段的布尔值，表示该字段是否存在于结构中。
当reader函数收到结构时，在直接操作之前应该检查字段已经被设置。

class Example {
  public:
    Example() :
      number(10),
      bigNumber(0),
      decimals(0),
      name("thrifty") {}
      
    int32_t number;
    int64_t bigNumber;
    double decimals;
    std::string name;
    
    struct __isset {
      __isset() :
      number(false),
      bigNumber(false),
      decimals(false),
      name(false) {}
      bool number;
      bool bigNumber;
      bool decimals;
      bool name;
    } __isset;
    ...
}

5.3、案例分析
有四种情况可能会发生版本不匹配。
1.添加了字段，旧客户端，新服务。 在这种情况下，旧客户端不会发送新字段。 新服务识别出该字段未设置，对过期请求使用默认行为。
2.删除字段，旧客户端，新服务。 在这种情况下，旧客户端发送删除的字段。 新服务只是忽略它。
3.添加了字段，新客户端，旧服务。 新客户端发送旧服务器无法识别的字段。 旧服务只是忽略它并当成正常处理。
4.删除字段，新客户端，旧服务。 这是最危险的情况，因为旧服务不太可能为缺少的字段实现合适的默认行为。 建议在这种情况下，在新客户端之前推出新服务。

5.4、协议/传输版本控制
TProtocol抽象通用被设计成可以让协议实现能够以他们认为合适的方式自由地进行版本控制。 
具体来说，任何协议实现都可以在writeMessageBegin（）调用中随意发送它喜欢的任何内容。
完全取决于实现者如何在协议级别处理版本控制。 关键是协议编码更改要与接口定义版本更改安全隔离。 
注意，针对TTransport接口也是一样。
例如，如果我们希望向TFileTransport添加一些新的校验和或错误检测，
我们可以简单地将一个版本头部添加到它写入文件的数据中，这样它仍然可以接受没有给定头部的旧日志文件。

6、RPC 实现
6.1 TProcessor
Thrift设计中的最后一个核心接口是TProcessor，也许是最简单的构造函数。接口如下：
interface TProcessor {
  bool process(TProtocol in, TProtocol out) throws TException
}
这里的关键设计思想是，我们构建的复杂系统可以从根本上分解为在输入和输出上运行的代理或服务。 
在大多数情况下，实际上只有一个需要处理的输入和输出（RPC客户端）。

6.2 生成的代码
定义服务后，我们使用一些帮助程序生成一个能够处理该服务的RPC请求的TProcessor实例。 基本结构（以伪C ++表示）如下：
Service.thrift
  => Service.cpp
    interface ServiceIf
    class ServiceClient : virtual ServiceIf
    TProtocol in
    TProtocol out
  class ServiceProcessor : TProcessor
    ServiceIf handler
    
ServiceHandler.cpp
  class ServiceHandler : virtual ServiceIf
TServer.cpp
  TServer(TProcessor processor,
          TServerTransport transport,
          TTransportFactory tfactory,
          TProtocolFactory pfactory)
  serve()

我们从Thrift的定义文件生成虚拟服务接口。生成的client类实现了这些接口并且使用两个Tprotocol实例来进行I/O操作。
生成的处理程序实现了TProcessor接口。通过process()调用，生成的代码具有处理RPC调用的所有逻辑，并将其作为服务接口的一个参数，
该代码由程序开发者实现。由用户提供了独立的非生成的程序接口源代码。

6.3、TServer
最终，Thrift核心库提供一个TServer抽象。TServer对象主要作用如下：
• 使用TServerTransport获取TTransport
• 使用TTransportFactory选择性转换原始transport成合适的应用程序transport（通常这里使用TBufferedTransportFactory）
• 使用TProtocolFactory来为TTransport创建输入和输出协议
• 唤醒TProcessor对象的process()方法

Thrift层级划分合理，服务端代码不需要关心传输、编码或者使用的应用端程序。server封装了连接处理，多线程等的逻辑，而让处理程序来处理RPC。
应用程序开发者仅仅需要编写定义好的Thrift文件以及相关接口实现。Facebook已经部署了多个TServer实现，包括了单线程TSimpleServer，
一个连接一个线程的TThreadedServer，以及线程池的TThreadPoolServer。TProcessor的接口设计非常通用。不要求TServer接受生成的TProcessor对象。
Thrift允许开发者轻松编写在TProtocol对象上任何类型的服务（例如，服务可以简单的流式传输一个对象，无需实际的RPC方法调用。）

7、实现细节
7.1、目标语言
Thrift目前支持5种目标语言：C++、Java、Python、Ruby和PHP，在Facebook，我们已经部署的服务主要是C++、Java和Python。PHP实现的Thrift服务同样嵌入在
Apache的web服务中，为我们许多使用前端提供了透明的后台访问，这些前端使用基于TTransport接口实现的THttpClient。
尽管Thrift目的是（明确地设计成）比典型的Web技术更高效和更强大，正如我们设计基于XML的REST Web服务API时，
我们注意到Thrift可以很容易地定义我们的服务接口。 虽然我们目前没有使用SOAP封装（作者认为已经有太多重复的企业Java软件来做这类事情），
但是我们可以快速扩展Thrift来为我们服务生成的XML Schema Definition文件，以及为我们的web服务快速生成同框架不同版本的实现。 
虽然公共Web服务与Thrift的核心用例和设计并不相关，但Thrift促进了快速迭代，并使我们能够在需要时快速将整个基于XML的Web服务迁移到更高性能的系统。

7.2、生成的结构体
我们做出了有意识的决定，使我们生成的结构尽可能透明。所有字段都可公开访问;没有set()和get()方法。
同样，不强制使用isset对象。我们不包含任何FieldNotSetException构造。开发人员可以选择使用这些字段来编写更健壮的代码，
但系统对于完全忽略isset结构并且在所有情况下都会提供合适的默认行为的开发人员来说是健壮的。
这种选择的动机是希望简化应用程序开发。我们的目标不是让开发人员用他们选择的语言学习丰富的新库，而是生成允许他们使用每种语言中最熟悉的构造的代码。
我们还将生成的对象的rea()和write()方法设为public，以便可以在RPC客户端和服务器的上下文之外使用这些对象。 
Thrift是一个有用的工具，仅用于生成可跨编程语言轻松序列化的对象。

7.3、 RPC 方法标识符
RPC中的方法调用是通过将方法名称作为字符串发送来实现的。这种方法的一个问题是较长的方法名称需要更多带宽。
我们尝试使用fixedsize哈希来识别方法，但最终得出的结论是节省的费用不值得。
如果没有元存储系统（即，为当前版本的文件生成非冲突哈希，我们必须知道该文件的任何先前版本中曾存在的所有冲突）。
我们希望在方法调用时避免太多不必要的字符串比较。为了解决这个问题，我们生成从字符串到函数指针的映射，以便在常见情况下通过常量哈希查找有效地完成调用。
这需要使用一些有趣的代码构造。因为Java没有函数指针，所以进程函数都是实现公共接口的私有成员类。
private class ping implements ProcessFunction {
  public void process(int seqid,
                      TProtocol iprot,
                      TProtocol oprot)
    throws TException
  { ...}
}
HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();
In C++, 我们采用相对高级的构造: 成员函数指针
std::map<std::string,
        void (ExampleServiceProcessor::*)(int32_t,
        facebook::thrift::protocol::TProtocol*,
        facebook::thrift::protocol::TProtocol*)>
processMap_;
使用这些技术，字符串处理的成本是最小的，并且我们通过检查已知的字符串方法名称就能够轻松调试损坏或误解数据。

7.4、服务于多线程
Thrift服务需要基本的多线程来处理来自多个客户端的同时请求。 对于Thrift服务器逻辑的Python和Java实现，随语言一起分发的标准线程库提供了足够的支持。 
对于C ++实现，不存在标准的多线程运行时库。 具体而言，不存在健壮，轻量级和可移植的线程管理器和计时器类实现。 
我们研究了现有的实现，即boost::thread，boost::threadpool，ACE Thread Manager和ACE Timer。

虽然boost::threads[1]提供了多线程原语（互斥，条件，线程）的纯净，轻量和健壮的实现，但它不提供线程管理器或计时器实现。
boost::threadpool[2]也看起来很有前景，但对于我们的目的还不够远。 我们希望尽可能地限制对第三方库的依赖。
因为boost::threadpool不是纯模板库并且需要运行时库，并且因为它还不是官方Boost发行版的一部分，所以我们觉得它还没有准备好在Thrift中使用。 
随着boost::threadpool的发展，特别是如果它被添加到Boost发行版中，我们可能会重新考虑我们不使用它的决定。

除了多线程原语之外，ACE还有一个线程管理器和计时器类。 ACE最大的问题是它是ACE。 与Boost不同，ACE API质量很差。 
ACE中的所有内容都依赖于ACE中的所有其他内容 - 因此迫使开发人员抛弃标准类（例如STL集合），转而使用ACE的自制实现。 
此外，与Boost不同，ACE实现几乎不了解C ++编程的功能和缺陷，也没有利用现代模板技术来确保编译时安全性和合理的编译器错误消息。 
出于所有这些原因，ACE被拒绝了。 相反，我们选择实现我们自己的库，如以下部分所述。

7.5、线程原语
Thrift线程库实现在facebook::thrift::concurrency命名空间下并且有三个部分：
• primitives
• thread pool manager
• timer manager
如上所述，我们对在Thrift上引入任何其他依赖项犹豫不决。 我们决定使用boost::shared ptr，因为它对多线程应用程序非常有用，
它不需要链接时或运行时库（即它是纯模板库），它将成为C++ 0x标准的一部分。

我们实现了标准的Mutex和Condition类，以及一个Monitor类。 后者只是互斥和条件变量的组合，类似于为Java Object类提供的Monitor实现。 
这有时也被称为障碍。 我们提供了一个Synchronized guard类来允许类似Java的同步块。 这只是一些语法糖，
但是，就像它的Java对应物一样，它清楚地界定了代码的关键部分。 与Java版本不同，我们仍然能够以编程方式锁定，解锁，阻止和发送motinors。
void run() {
  {Synchronized s(manager->monitor);
    if (manager->state == TimerManager::STARTING) {
        manager->state = TimerManager::STARTED;
        manager->monitor.notifyAll();
    }
  }
}
我们再次从Java借用了线程和runnable类之间的区别。 线程是实际的可调度对象。 Runnable是在线程中执行的逻辑。 
Thread实现处理所有特定于平台的线程创建和销毁问题，而Runnable实现处理特定于应用程序的每线程(per-thread)逻辑。 
这种方法的好处是开发人员可以轻松地对Runnable类进行子类化，而无需引入特定于平台的超类。

7.6、Thread, Runnable, and shared ptr
我们在整个ThreadManager和TimerManager实现中使用boost::shared ptr来保证可以被多个线程访问的死对象的清理。 
对于Thread类实现，boost::shared ptr使用需要特别注意确保在创建和关闭线程时，Thread对象既不会泄漏也不会过早地解除引用。

线程创建需要调用C库。(在我们的例子中是POSIX线程库libpthread，但对于WIN32线程也是如此）。
通常，操作系统很少（如果有的话）保证何时调用ThreadMain（一个C线程的入口点函数）。 
因此，我们的线程可能会创建调用，ThreadFactory::newThread()可能会在此之前很好地返回调用者。 
如果调用者在ThreadMain调用之前放弃其引用，则确保不会过早地清除返回的Thread对象，Thread对象在其start方法中对其自身进行弱引用。

使用弱引用，ThreadMain函数可以在进入绑定到Thread的Runnable对象的Runnable::run方法之前尝试获取强引用。
如果在退出Thread::start和进入ThreadMain之间没有获得对线程的强引用，则弱引用返回null并且函数立即退出。

Thread需要对自身进行弱引用会对API产生重大影响。 由于引用是通过boost::shared ptr模板进行管理的，
因此Thread对象必须具有对自身的引用，该引用由返回给调用者的相同boost::shared ptr封装包装。 这需要使用工厂模式。
ThreadFactory创建原始Thread对象和boost::shared ptr包装器，并调用实现Thread接口的类的私有辅助方法（在本例中为PosixThread::weakRef），
以允许它通过 boost::shared ptr封装。

Thread和Runnable对象互相引用。 Runnable对象可能需要知道它正在执行的线程，而且一个Thread显然需要知道它所托管的Runnable对象。 
这种相互依赖性更加复杂，因为每个对象的生命周期都是独立的。 应用程序可以创建一组Runnable对象以在不同的线程中重用，
或者一旦为其创建并启动了一个线程，它可能在创建后就忘记一个Runnable对象。
Thread类在其构造函数中对托管的Runnable对象采用boost::shared ptr引用，而Runnable类具有显式线程方法以允许托管线程的显式绑定。
ThreadFactory::newThread将对象绑定到彼此。

7.7、线程管理器
线程管理器创建一个工作线程池，并允许应用程序在自由工作线程可用时调度任务执行。 线程管理器不实现动态线程池大小调整，但提供原语，
以便应用程序可以根据负载添加和删除线程。 选择此方法是因为实现负载指标和线程池大小非常特定于应用程序。 
例如，某些应用程序可能希望根据通过轮询样本测量的工作到达率的运行平均值来调整池大小。 其他人可能只是希望立即对工作队列深度高水位和低水位做出反应。
我们不是试图创建足够复杂的API抽象来捕获这些不同的方法，而是将其留给特定的应用程序，并提供原语来制定所需的策略并采样当前状态。

7.8、时间管理器
时间管理器允许应用程序安排Runnable对象在将来的某个时刻执行。 
它的具体任务是允许应用程序定期对时间管理器进行采样，并根据应用程序策略更改线程池大小。
当然，它可以用于生成任意数量的计时器或警报事件。
时间管理器的默认实现使用单个线程来执行过期的Runnable对象。 因此，如果定时器操作需要做大量的工作，特别是如果它需要阻塞I/O，
那么应该在一个单独的线程中完成。

7.9、非阻塞操作
虽然Thrift传输接口更直接地映射到阻塞I/O模型，但我们已经在C ++中基于libevent和TFramedTransport实现了高性能的TNonBlockingServer。
我们通过使用状态机将所有I/O移动到一个紧密的事件循环中来实现这一点。 
实质上，事件循环将框架请求读入TMemoryBuffer对象。 一旦准备好整个请求，就会将它们分派到TProcessor对象，该对象可以直接从内存中的数据中读取。

7.10、编译器
Thrift编译器使用标准的lex/yacc lexing和parsing在C ++中实现。虽然它使用另一种语言（即Python Lex-Yacc（PLY）或ocamlyacc）中较少的代码行来实现，
但使用C ++强制显式定义语言结构。强烈地键入解析树元素（这一点可以辩证）使得代码对于新开发人员来说更加平易近人。
代码生成使用两遍完成。第一遍仅查找包含文件和类型定义。在此阶段不会检查类型定义，因为它们可能依赖于包含文件。
所有包含的文件在第一遍中顺序扫描。解析包含树之后，将对所有文件进行第二次传递，将类型定义插入到解析树中，并在任何未定义的类型上引发错误。
然后针对解析树生成程序。

由于固有的复杂性和循环依赖的可能性，我们明确禁止前向声明。两个Thrift结构不能各自包含另一个的实例。 
（因为我们不允许在生成的C ++代码中使用空结构实例，所以这实际上是不可能的。）

7.11、TFileTransport
TFileTransport通过将传入数据的长度框起来并将其写入磁盘来记录Thrift请求/结构。 使用成帧的磁盘格式可以更好地进行错误检查，
并有助于处理有限数量的离散事件。 TFileWriterTransport使用内存交换缓冲区系统来确保在记录大量数据时的良好性能。 
Thrift日志文件被拆分为指定大小的块; 记录的消息不允许跨越块边界。 跨越块边界的消息将导致填充
添加到块的末尾，并且消息的第一个字节与下一个块的开头对齐。 将文件分区为块使得可以从文件中的特定点读取和解释数据。

8. Facebook Thrift服务
Thrift已被Facebook广泛运用，包括搜索，日志，移动开发，广告以及开发者平台。下面讨论两种具体的方法。
8.1、搜索
Thrift用作Facebook搜索服务的底层协议及传输层。多语言生成非常适合所搜服务，因为其允许服应用服务端使用更高效的语言开发（C++），
并且允许web端使用Thrift PHP库来请求服务。还有大量的搜索统计数据、开发、以及功能测试是基于生成的Python代码完成。
并且，Thrift日志文件格式采用redo日志技术来提供实时搜索索引更新。Thrift允许搜索团队利用每种语言来发挥其优势并快速迭代代码。
8.2、日志
Thrift TFileTransport功能用来结构化日志。每个服务的功能定义以及其参数可被认为是一个由函数名定义的结构化的日志项。
该日志后续可以用于各种目的，包括线下和线上处理，统计聚合以及重做日志记录。

9、结论
Thrift是的Facebook构建了可扩展的后台高效服务。应用开发者只需关注应用代码而无需担心socket层。通过将缓存和I/O逻辑在一处编写，
而不是分散在不同的应用，我们避免了重复性的工作。
Thrift已被Facebook广泛运用，包括搜索，日志，移动开发，广告以及开发者平台。
我们发现，额外的软件抽象层所产生的边际性能成本，远远不如它给开发人员效率和系统可靠性的提高。

A、相似系统
下面非常简要的描述了和Thrift详细的系统：
• SOAP，基于XML，设计用于web服务，但是XML解析开销过多。
• CORBA，相对复杂，过度设计且笨重，安装相对繁琐。
• COM，主要嵌入在windows客户端软件，并不是全开放的解决方案。
• Pillar，轻量且高效，但是缺少版本控制以及代码抽象。
• Protocol Buffers，封闭源，由Google拥有。 在Sawzall论文中描述。



















